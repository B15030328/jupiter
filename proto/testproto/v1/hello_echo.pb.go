// Code generated by github.com/douyu/jupiter-layout/cmd/protoc-gen-go-echo. DO NOT EDIT.

package testproto

import (
	context "context"
	xhttp "github.com/douyu/jupiter/pkg/util/xhttp"
	"github.com/labstack/echo/v4"
	metadata "google.golang.org/grpc/metadata"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the douyu/jupiter-layout/cmd/protoc-gen-go-echo package it is being compiled against.
// http.context.metadata.
// v4.echoxhttp.

type GreeterServiceHTTPServer interface {
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
}

func RegisterGreeterServiceHTTPServer(r *echo.Echo, srv GreeterServiceHTTPServer) {
	s := GreeterService{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

type GreeterService struct {
	server GreeterServiceHTTPServer
	router *echo.Echo
}

func (s *GreeterService) SayHello_0(ctx echo.Context) error {
	var in SayHelloRequest
	if err := xhttp.DefaultProtoBinder.Bind(&in, ctx); err != nil {
		return xhttp.ProtoJSON(ctx, http.StatusOK, err)
	}
	md := metadata.New(nil)
	for k, v := range ctx.Request().Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx.Request().Context(), md)
	out, err := s.server.(GreeterServiceHTTPServer).SayHello(newCtx, &in)
	if err != nil {
		return xhttp.ProtoJSON(ctx, http.StatusOK, err)
	}

	return xhttp.ProtoJSON(ctx, http.StatusOK, out)
}

func (s *GreeterService) RegisterService() {

	s.router.Add("POST", "/v1/helloworld.Greeter/SayHello", s.SayHello_0)

}
